h1. How it works

Plugin is based on Spring Security and uses web filters for authorization, for more details see
[Spring Security docs|http://static.springsource.org/spring-security/site/docs/3.0.x/reference/security-filter-chain.html]

h1. Available filters

There are 3 types of authorization, and 3 filters:

 * FacebookAuthRedirectFilter - server-side authorization (used by default)
 * FacebookAuthCookieTransparentFilter - automatic client-side authorization
 * FacebookAuthCookieDirectFilter - manual client-side authorization
 * FacebookAuthJsonFilter - for AJAX or non-browser clients (Android/iOS/etc)

h2. Server-Side authorization (FacebookAuthRedirectFilter)

It's a standard [Login for Server-side Apps|https://developers.facebook.com/docs/howtos/login/server-side-login/].
After clicking on 'connect button' user gets redirected to special Facebook page, for authentication, and then
redirected back to your app.

h2. Transparent cookie based authorization (FacebookAuthCookieTransparentFilter)

Based on [Facebook Javascript SDK|https://developers.facebook.com/docs/reference/javascript/] authorization. On
client side it makes Facebook authorization and put Facebook Cookie (it's made by Facebook Javascript,
you don't need anything special)

After successful authorization on client side, the browser should reload current page. Or open any other page.

This filter will *process each request*, and if it sees valid Facebook cookie, it makes authorization for
current user. If it's a new user, it creates a new one for application, with provided Facebook credentials.

{note}
It's per-request authorization. That means that this filter will try to authorize user on each page request.
{note}

h2. Manual cookie based authorization (FacebookAuthCookieDirectFilter)

Based on [Facebook Javascript SDK|https://developers.facebook.com/docs/reference/javascript/] authorization. On
client side it makes Facebook authorization and put Facebook Cookie (it's made by Facebook Javascript,
you don't need anything special)

Same as FacebookAuthCookieTransparentFilter, it parse Facebook cookie, but only for specified url. Like
username/password filter from spring-security-core or similar. After successful authorization it
can redirect user to specified url.

h2. Android/iOS/desktop or AJAX authorization (FacebookAuthJsonFilter)

Client should send Access Token or Signed Request as parameter, and will get authorization response as JSON

See [filter docs|guide:3.5 Json Authorization]

h1. Filter configuration

You can use config parameter @grails.plugins.springsecurity.facebook.filter.type@ to configure which filters
you want to use in your application.

{note}
It's not a Spring Security configuration, not a configuration for Spring filters. Just a
extra configuration, that used only by this plugin.
{note}

By default it uses only one 'redirect' filter:
{code}
grails.plugins.springsecurity.facebook.filter.type='redirect'
{code}

You can use more that one filter at same time:
{code}
grails.plugins.springsecurity.facebook.filter.type='transparent,cookieDirect'
{code}

Value types:
  * @redirect@ - use standard server side authorization
  * @transparent@ - use transparent cookie based authorization
  * @cookieDirect@ - use manual cookie based authorization
  * @json@ - use JSON authorization

