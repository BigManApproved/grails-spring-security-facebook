Grails plugin for Facebook Authentication, as extension to Grails Spring Security Core plugin

h1. Information

Sources: [https://github.com/splix/grails-spring-security-facebook]

h2. Requirements:
 * grails 1.3.7
 * spring-security-core plugin 1.1+

h2. How to install:
{code}
grails install-plugin spring-security-core
grails s2-quickstart
grails install-plugin spring-security-facebook
grails s2-init-facebook
{code}

h2. Examples:

  * https://github.com/splix/s2-facebook-example-13 - Example app for Grails 1.3.7
  * https://github.com/splix/s2-facebook-example-20 - Example app for Grails 2.0.0

h1. Configuration

Calling `grails s2-init-facebook` will configure plugin for, make sure
that you have configuration in your `Config.groovy` like:
{code}
grails.plugins.springsecurity.facebook.domain.class='<your FacebookUser domain>'
grails.plugins.springsecurity.facebook.secret = '<Facebook secret for your app>'
grails.plugins.springsecurity.facebook.appId = '<Facebooks's app ID>'
{code}

and now you can put Facebook Connect button in you GSP:
{code}
<facebookAuth:connect permissions="email,user_about_me"/>
{code}

You don't need to add anything else, just make sure that FB button is configured with cookie:true.

h1. Extend with service

If you need to add some specific logic to default plugin behaviour you have to create your own
service called `FacebookAuthService`. Plugin will check for know methods of this service, and if
they're exist - use them instead of own. You don't need to create all methods, just what you need.

List of possible methods:

h3. void onCreate(FacebookUser user, FacebookAuthToken token)

Where:

  * user - your domain for Facebook User
  * token - com.the6hours.grails.springsecurity.facebook.FacebookAuthToken

h3. void afterCreate(FacebookUser user, FacebookAuthToken token)

Where:

  * user - your domain for Facebook User
  * token - com.the6hours.grails.springsecurity.facebook.FacebookAuthToken

h3. FacebookUser findUser(Long uid)

Called when facebook user is authenticated (on every request), must return existing instance
for specified facebook uid, if exits. If doesn't - return null

Where:

  * uid - facebook user id

h3. FacebookUser create(FacebookAuthToken token)

Called when we have a new facebook user, called on first login to create all required
data structures

Where:

  * token - com.the6hours.grails.springsecurity.facebook.FacebookAuthToken

h3. Person createAppUser(FacebookUser user, FacebookAuthToken token)

Called when we have a new facebook user, called on first login to create main app User domain (when
we store Facebook User details in different domain)

Where:

  * user - your domain for Facebook User
  * token - com.the6hours.grails.springsecurity.facebook.FacebookAuthToken

h3. void createRoles(FacebookUser user)

Called when we have a new facebook user, called on first login to create roles list for new user

Where:

  * user - your domain for Facebook User

h3. def getPrincipal(FacebookUser user)

Must returns object to store in security context for specified facebook user (can return itself)

Where:

  * user - your domain for Facebook User

h3. Collection<GrantedAuthority> getRoles(FacebookUser user)

Must return roles list for specified facebook user

Where:

  * user - your domain for Facebook User

h3. void prepopulateAppUser(Person person, FacebookAuthToken token)

Must return roles list for specified facebook user

Where:

  * person - your domain for Person
  * token - com.the6hours.grails.springsecurity.facebook.FacebookAuthToken


h1. Use your own authentication dao

Plugin generates an Dao, after calling @s2-init-facebook@, and put it into your @conf/spring/resources.groovy@
and @Config.groovy@. Actually it's an 'dumb' dao implementations, you have to rewrite it to follow your
data structures:

h3. FacebookUser findUser(long uid)

Called on every authorization attempt. If must return existing user (instance of FaceboobUser domain) if user is already exists
in database. Or null if user not exists yet, it will be created at this case.

h3. FacebookUser create(FacebookAuthToken token)

Called when authenticated Facebook User not exists yet (when findUser has returned null value). It's the place to 
prepare all domain objects for your user, fill user roles, fetch extra data from Facebook API (using profided token.accessToken), etc.
And return just create user.

h3. void update(FacebookUser user)

Called when user details has changed (accessToken, session data, etc). If you don't using this data (it not using Facebook API) - you can skip this, make just empty method.

h3. Object getPrincipal(FacebookUser user)

Called to get actual user. Useful when you're storing Facebook User details in different model, related to main user domain. If your user and facebook user are same objects - just return it 

h3. Collection<GrantedAuthority> getRoles(FacebookUser user)

Return roles list for user related to specified Facebook user


h1. FAQ

h2. How it works?

Facebook setup special cookies after successful authorization, so this plugin just handles this cookies, and your
user will be automatically logged in to your webapp when she logged in into Facebook (and she has clicked
'Connect with Facebook' before)

h2. How to get user email?

{note}
First of all: you need 'email' permission on connect @<facebookAuth:connect permissions="email"/>@
{note}

Add Spring Social lib into your classpath, by adding following dependencies into your @BuildConfig.groovy@:
{code}
compile 'org.springframework.social:spring-social-core:1.0.0.RELEASE'
compile 'org.springframework.social:spring-social-facebook:1.0.0.RELEASE'
{code}

and then you can use Facebook API. For example you can fetch user's email on user cretion step:
{code}
Facebook facebook = new FacebookTemplate(token.accessToken)
FacebookProfile fbProfile = facebook.userOperations().userProfile
String email = fbProfile.getEmail()
{code}